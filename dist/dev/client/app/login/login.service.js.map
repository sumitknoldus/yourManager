{"version":3,"sources":["login/login.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAA2B,eAAe,CAAC,CAAA;AAG3C,qBAAwC,eAAe,CAAC,CAAA;AACxD,QAAO,6BAA6B,CAAC,CAAA;AAGrC;IAEI,sBAAoB,IAAU;QAAV,SAAI,GAAJ,IAAI,CAAM;QAD9B,aAAQ,GAAG,mBAAmB,CAAC;IACE,CAAC;IAEpC;;;;;OAKG;IACH,4BAAK,GAAL,UAAM,IAAU;QACd,IAAI,OAAO,GAAG,IAAI,cAAO,CAAC;YACxB,cAAc,EAAE,kBAAkB;SACnC,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,IAAI;aACb,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,EAAC,OAAO,EAAE,OAAO,EAAC,CAAC;aAC7D,SAAS,EAAE;aACX,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC;aACtB,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC7B,CAAC;IAED;;;;OAIG;IACK,kCAAW,GAAnB,UAAoB,KAAU;QAC5B,IAAI,MAAM,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC,KAAK;YACtC,KAAK,CAAC,MAAM,GAAM,KAAK,CAAC,MAAM,WAAM,KAAK,CAAC,UAAY,GAAG,cAAc,CAAC;QAC1E,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QACtB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;IAChC,CAAC;IAED;;;;OAIG;IACK,kCAAW,GAAnB,UAAoB,GAAa;QAC/B,IAAI,IAAI,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC;QACtB,MAAM,CAAC,IAAI,IAAI,EAAE,CAAC;IACpB,CAAC;IA3CH;QAAC,iBAAU,EAAE;;oBAAA;IA6Cb,mBAAC;AAAD,CA5CA,AA4CC,IAAA;AA5CY,oBAAY,eA4CxB,CAAA","file":"login.service.js","sourcesContent":["import { Injectable } from '@angular/core';\n\nimport {User} from '../shared/model/user';\nimport { Headers, Http, Response } from '@angular/http';\nimport 'rxjs/add/operator/toPromise';\n\n@Injectable()\nexport class LoginService {\n    loginUrl = '/api/users/signin';\n    constructor(private http: Http) {}\n\n  /**\n   * This method makes a post call to get the user logged in to the application.\n   * It returns user object in response if the credentials are correct\n   * @param user\n   * @returns {any<T>|Promise<*>|Promise<R>|Promise<T>|any}\n   */\n  login(user: User) {\n    let headers = new Headers({\n      'Content-Type': 'application/json'\n    });\n\n    return this.http\n      .post(this.loginUrl, JSON.stringify(user), {headers: headers})\n      .toPromise()\n      .then(this.extractData)\n      .catch(this.handleError);\n  }\n\n  /**\n   * Handles error if there is an error in http request\n   * @param error\n   * @returns {ErrorObservable}\n   */\n  private handleError(error: any) {\n    let errMsg = (error._body) ? error._body :\n      error.status ? `${error.status} - ${error.statusText}` : 'Server error';\n    console.error(errMsg);\n    return Promise.reject(errMsg);\n  }\n\n  /**\n   * Returns the data received in JSON format\n   * @param res\n   * @returns {*|{}}\n   */\n  private extractData(res: Response) {\n    let body = res.json();\n    return body || {};\n  }\n\n}\n"]}