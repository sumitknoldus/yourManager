{"version":3,"sources":["signup/signup.service.ts"],"names":[],"mappings":";;;;;;;;;;AACA,qBAA8B,eAAe,CAAC,CAAA;AAE9C,QAAO,6BAA6B,CAAC,CAAA;AACrC,qBAAyB,eAAe,CAAC,CAAA;AAEzC,2BAA+B,iBAAiB,CAAC,CAAA;AAIjD;IAIE,uBAAoB,IAAS;QAAT,SAAI,GAAJ,IAAI,CAAK;QAFrB,YAAO,GAAU,mBAAmB,CAAC;QACrC,WAAM,GAAU,mBAAmB,CAAC;IAE5C,CAAC;IAED;;;;OAIG;IACH,oCAAY,GAAZ,UAAa,IAAS;QACpB,IAAI,OAAO,GAAG,IAAI,cAAO,CAAC;YACxB,cAAc,EAAE,kBAAkB;SACnC,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,IAAI;aACb,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,EAAC,OAAO,EAAE,OAAO,EAAC,CAAC;aAC3D,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC;aACrB,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC7B,CAAC;IAED;;;;OAIG;IACH,8BAAM,GAAN,UAAO,KAAY;QACjB,IAAI,OAAO,GAAG,IAAI,cAAO,CAAC;YACxB,cAAc,EAAE,kBAAkB;SACnC,CAAC,CAAC;QAEH,MAAM,CAAC,IAAI,CAAC,IAAI;aACb,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,SAAS,CAAC,EAAC,iBAAiB,EAAC,KAAK,EAAC,CAAC,EAAE,EAAC,OAAO,EAAE,OAAO,EAAC,CAAC;aACjF,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC;aACrB,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC7B,CAAC;IAED;;;;OAIG;IACK,mCAAW,GAAnB,UAAoB,GAAa;QAC/B,IAAI,IAAI,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC;QACtB,MAAM,CAAC,IAAI,IAAI,EAAG,CAAC;IACrB,CAAC;IAED;;;;OAIG;IACK,mCAAW,GAAnB,UAAoB,KAAU;QAC5B,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;QACnC,IAAI,MAAM,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,GAAG,KAAK,CAAC,KAAK;YACtC,KAAK,CAAC,MAAM,GAAM,KAAK,CAAC,MAAM,WAAM,KAAK,CAAC,UAAY,GAAG,cAAc,CAAC;QAC1E,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;QACtB,MAAM,CAAC,uBAAU,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IAClC,CAAC;IA7DH;QAAC,iBAAU,EAAE;;qBAAA;IA+Db,oBAAC;AAAD,CA9DA,AA8DC,IAAA;AA9DY,qBAAa,gBA8DzB,CAAA","file":"signup.service.js","sourcesContent":["import {User} from '../shared/model/user';\nimport { Headers, Http } from '@angular/http';\n\nimport 'rxjs/add/operator/toPromise';\nimport {Injectable} from '@angular/core';\nimport {Response} from 'angular2/http';\nimport { Observable }     from 'rxjs/Observable';\n\n\n@Injectable()\nexport class SignupService {\n\n  private postUrl:string = '/api/users/signup';\n  private verify:string = '/api/users/verify';\n  constructor(private http:Http) {\n  }\n\n  /**\n   * This service makes a post request and sends the user data for signup\n   * @param user\n   * @returns {Observable<R>|Promise<ErrorObservable>|Promise<R>|Promise<T>|any}\n   */\n  verification(user:User):Observable<JSON> {\n    let headers = new Headers({\n      'Content-Type': 'application/json'\n    });\n\n    return this.http\n      .post(this.verify, JSON.stringify(user), {headers: headers})\n      .map(this.extractData)\n      .catch(this.handleError);\n  }\n\n  /**\n   * This service makes a post requests with the unique token to get the user signed up\n   * @param token\n   * @returns {Observable<R>|Promise<ErrorObservable>|Promise<R>|Promise<T>|any}\n   */\n  signup(token:string):Observable<any> {\n    let headers = new Headers({\n      'Content-Type': 'application/json'\n    });\n\n    return this.http\n      .post(this.postUrl, JSON.stringify({verificationToken:token}), {headers: headers})\n      .map(this.extractData)\n      .catch(this.handleError);\n  }\n\n  /**\n   * Returns the data received in JSON format\n   * @param res\n   * @returns {*|{}}\n   */\n  private extractData(res: Response) {\n    let body = res.json();\n    return body || { };\n  }\n\n  /**\n   * Handles error if there is an error in http request\n   * @param error\n   * @returns {ErrorObservable}\n   */\n  private handleError(error: any) {\n    console.log(JSON.stringify(error));\n    let errMsg = (error._body) ? error._body :\n      error.status ? `${error.status} - ${error.statusText}` : 'Server error';\n    console.error(errMsg);\n    return Observable.throw(errMsg);\n  }\n\n}\n"]}