{"version":3,"sources":["dashboard/dashboard.service.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,qBAA+B,eAAe,CAAC,CAAA;AAC/C,qBAA+B,eAAe,CAAC,CAAA;AAE/C,2BAA+B,iBAAiB,CAAC,CAAA;AAGjD,QAAO,uBAAuB,CAAC,CAAA;AAC/B,QAAO,yBAAyB,CAAC,CAAA;AACjC,QAAO,gCAAgC,CAAC,CAAA;AACxC,QAAO,wCAAwC,CAAC,CAAA;AAChD,QAAO,6BAA6B,CAAC,CAAA;AACrC,QAAO,6BAA6B,CAAC,CAAA;AAIrC;IACI,uBAAqB,IAAU;QAAV,SAAI,GAAJ,IAAI,CAAM;QA6BvB,kBAAa,GAAG,kBAAkB,CAAC,CAAE,iBAAiB;IA7B5B,CAAC;IACnC,0CAAkB,GAAlB,UAAoB,KAAa;QAE7B,IAAI,CAAC,aAAa,IAAG,KAAK,CAAC;QAC3B,uCAAuC;QACvC,oEAAoE;QACpE,yDAAyD;QAEzD,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC;aACnC,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC;aACrB,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACjC,CAAC;IAGO,mCAAW,GAAnB,UAAoB,GAAa;QAC7B,IAAI,IAAI,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC;QAEtB,MAAM,CAAC,IAAI,IAAI,EAAG,CAAC;IACvB,CAAC;IAEO,mCAAW,GAAnB,UAAqB,KAAU;QAC3B,oEAAoE;QACpE,8DAA8D;QAC9D,IAAI,MAAM,GAAG,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,KAAK,CAAC,OAAO;YACxC,KAAK,CAAC,MAAM,GAAM,KAAK,CAAC,MAAM,WAAM,KAAK,CAAC,UAAY,GAAG,cAAc,CAAC;QAC5E,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,yBAAyB;QAChD,MAAM,CAAC,uBAAU,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IACpC,CAAC;IA7BL;QAAC,iBAAU,EAAE;;qBAAA;IAgCb,oBAAC;AAAD,CA/BA,AA+BC,IAAA;AA/BY,qBAAa,gBA+BzB,CAAA","file":"dashboard.service.js","sourcesContent":["import { Injectable }     from '@angular/core';\nimport { Http, Response } from '@angular/http';\n\nimport { Observable }     from 'rxjs/Observable';\n//import { Headers, RequestOptions } from '@angular/http';\nimport {Asset} from '../shared/model/asset';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/catch';\nimport 'rxjs/add/operator/debounceTime';\nimport 'rxjs/add/operator/distinctUntilChanged';\nimport 'rxjs/add/operator/switchMap';\nimport 'rxjs/add/operator/toPromise';\n\n\n@Injectable()\nexport class SearchService {\n    constructor (private http: Http) {}\n    getAllocatedAssets (empId: string): Observable<Asset[]> {\n\n        this.listAssetsURL+= empId;\n        //let body = JSON.stringify({ empId });\n        //let headers = new Headers({ 'Content-Type': 'application/json' });\n        //let options = new RequestOptions({ headers: headers });\n\n        return this.http.get(this.listAssetsURL)\n            .map(this.extractData)\n            .catch(this.handleError);\n    }\n\n\n    private extractData(res: Response) {\n        let body = res.json();\n\n        return body || { };\n    }\n\n    private handleError (error: any) {\n        // In a real world app, we might use a remote logging infrastructure\n        // We'd also dig deeper into the error to get a better message\n        let errMsg = (error.message) ? error.message :\n            error.status ? `${error.status} - ${error.statusText}` : 'Server error';\n        console.error(errMsg); // log to console instead\n        return Observable.throw(errMsg);\n    }\n\n    private listAssetsURL = '/api/Asset/list/';  // URL to web API\n}\n"]}