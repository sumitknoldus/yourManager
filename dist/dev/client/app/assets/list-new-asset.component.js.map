{"version":3,"sources":["assets/list-new-asset.component.ts"],"names":[],"mappings":"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","file":"list-new-asset.component.js","sourcesContent":["import {Component} from '@angular/core';\nimport {AssetService} from './asset.service';\nimport {Router, ActivatedRoute} from '@angular/router';\nimport {Asset} from '../shared/model/asset';\nimport {GridOptions} from 'ag-grid/main';\nimport {ClickableAssignComponent} from './clickable-assign.component';\nimport {DatePipe} from '@angular/common';\n\n@Component({\n  moduleId:module.id,\n  selector: 'ym-list',\n  templateUrl: 'search-asset.component.html',\n  styleUrls:['search-asset.component.css'],\n})\n\nexport class ListNewAssetComponent {\n  isResult;\n  noResultFound;\n  private gridOptions:GridOptions =  <GridOptions>{};\n  constructor(private assetService: AssetService,\n              private router: Router,\n              private route: ActivatedRoute,\n              private datePipe: DatePipe) {\n  }\n\n  ngOnInit() {\n    this.route.data.forEach((data: { assets: Asset[]}) => {\n      if(data.assets.length > 0) {\n        this.gridOptions.columnDefs = this.createColumnDefs(data.assets[0]);\n        this.gridOptions.rowData = this.createDataRows(data.assets);\n        this.isResult= true;\n      } else {\n        this.noResultFound = '../../assets/images/no-result.png';\n        this.isResult = false;\n      }\n    });\n  }\n\n  getHeaderName(key: string) {\n    let newKey = key;\n    let capsLetterArray  = key.match(/[A-Z]/);\n    if(capsLetterArray !== null) {\n      capsLetterArray.map(capitalLetter => key = key.replace(capitalLetter, ' '+capitalLetter.toLowerCase()));\n      newKey = this.getHeaderName(key);\n    }\n    return newKey;\n  }\n\n  /**\n   * This method returns column headers for ag-Grid\n   * @param asset\n   * @returns {Array}\n   */\n  private createColumnDefs(asset) {\n    let keyNames = Object.keys(asset);\n    let headers = [];\n    keyNames.filter(key => key !== '__v' && key !== '_id' && key !== 'empId' &&\n    key != 'empName' && key !== 'dateOfIssue' && key !== 'dateOfReturn').map(key => {\n      if(key === 'specs') {\n        headers.push({\n          headerName: 'SPECIFICATIONS',\n          children: [\n            {headerName : 'HD', field : 'specs.HD', width : 100},\n            {headerName : 'RAM', field : 'specs.RAM', width : 100},\n            {headerName : 'PROCESSOR', field : 'specs.Processor', width : 100}\n          ]\n        });\n      } else {\n        headers.push({\n          headerName: this.getHeaderName(key).toUpperCase(),\n          field: key,\n          width: 140\n        });\n      }\n\n    });\n\n    headers.push({\n      headerName: 'UPDATE',\n      field: 'Assign Asset',\n      cellRendererFramework: {\n        //template: '<button (click) = 'editAsset()'> Edit </button>'\n        component: ClickableAssignComponent\n      },\n      pinned: 'right',\n      width: 140\n    });\n\n    return headers;\n\n  }\n\n  /**\n   * This method returns rows for the ag-Grid\n   * @param assets\n   * @returns {Array}\n   */\n  private createDataRows(assets) {\n    let updatedAssets = [];\n    for(let i in assets) {\n      updatedAssets.push({\n        _id:assets[i]._id,\n        empId:assets[i].empId,\n        empName: assets[i].empName,\n        assetType: assets[i].assetType,\n        model: assets[i].model,\n        assetCode: assets[i].assetCode,\n        serialNumber: assets[i].serialNumber,\n        shippingDate: this.datePipe.transform(assets[i].shippingDate, 'yyyy-MM-dd'),\n        dateOfIssue: this.datePipe.transform(assets[i].dateOfIssue, 'yyyy-MM-dd'),\n        dateOfReturn: this.datePipe.transform(assets[i].dateOfReturn, 'yyyy-MM-dd'),\n        warrantyEndDate: this.datePipe.transform(assets[i].warrantyEndDate, 'yyyy-MM-dd'),\n        lastMaintenanceDate: this.datePipe.transform(assets[i].lastMaintenanceDate, 'yyyy-MM-dd'),\n        specs: assets[i].specs,\n        isAvailable:assets[i].isAvailable,\n        update:assets[i].update\n      });\n    }\n    return updatedAssets;\n  }\n\n}\n"]}