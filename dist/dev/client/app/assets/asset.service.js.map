{"version":3,"sources":["assets/asset.service.ts"],"names":[],"mappings":"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","file":"asset.service.js","sourcesContent":["import { Injectable }     from '@angular/core';\nimport { Http, Response, Headers} from '@angular/http';\nimport { Observable }     from 'rxjs/Observable';\nimport {Asset} from '../shared/model/asset';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/catch';\nimport 'rxjs/add/operator/debounceTime';\nimport 'rxjs/add/operator/distinctUntilChanged';\nimport 'rxjs/add/operator/switchMap';\nimport 'rxjs/add/operator/toPromise';\n\n\n@Injectable()\nexport class AssetService {\n\n    private listAssetsURL = '/api/assets/list/';\n    private listNewAssetsUrl = '/api/assets/list-new/';\n    private addAssetUrl = '/api/assets/add';\n    private getAssetUrl = '/api/assets/get';\n    private editAssetUrl = '/api/assets/save';\n    private returnAssetUrl = '/api/assets/return';\n    private fetchAvailableAssetUrl = '/api/assets/fetch/';\n    private assignAssetUrl = '/api/assets/assign';\n    private listAllAssetUrl = '/api/assets/listall';\n    private listEmail = '/api/users/listemail';\n    private assignEmpIdUrl = '/api/users/assignempid';\n    private listAllEmp = '/api/users/getallemps';\n    private verifyUserAsset = '/api/assets/verifyuserasset';\n\n\n    constructor(private http:Http) {\n    }\n\n    /**\n     * Makes a get request to get all assets allocated to a particular employee.\n     * @param empId\n     * @returns {Observable<R>|Promise<ErrorObservable>|Promise<R>|Promise<T>|any}\n     */\n    getAllocatedAssets(empId:string):Observable<> {\n        return this.http.get(this.listAssetsURL + empId)\n            .map(this.extractData)\n            .catch(this.handleError);\n    }\n\n    getAllEmp():Observable<> {\n        return this.http.get(this.listAllEmp)\n            .map(this.extractData)\n            .catch(this.handleError);\n    }\n\n    verifyUserRequest(employee:{}):Observable<> {\n        let headers = new Headers({\n            'Content-Type': 'application/json'\n        });\n        return this.http.post(this.verifyUserAsset, employee, {headers: headers})\n            .map(this.extractCompleteData)\n            .catch(this.handleError);\n    }\n\n    /**\n     * Makes a post request to add a new asset.\n     * @param asset\n     * @returns {Observable<R>|Promise<ErrorObservable>|Promise<R>|Promise<T>|any}\n     */\n    addAsset(asset:Asset):Observable<> {\n        let headers = new Headers({\n            'Content-Type': 'application/json'\n        });\n        asset.isAvailable = true;\n        return this.http\n            .post(this.addAssetUrl, JSON.stringify(asset), {headers: headers})\n            .map(this.extractData)\n            .catch(this.handleError);\n    }\n\n\n    /**\n     * Makes a post request to get an Asset by the object ID\n     * @param _id\n     * @returns {Observable<R>|Promise<ErrorObservable>|Promise<R>|Promise<T>|any}\n     */\n    getById(_id:string):Observable<> {\n        let headers = new Headers({\n            'Content-Type': 'application/json'\n        });\n        return this.http\n            .post(this.getAssetUrl, JSON.stringify({'_id': _id}), {headers: headers})\n            .map(this.extractData)\n            .catch(this.handleError);\n    }\n\n    /**\n     * Makes a post request to edit an Asset\n     * @param asset\n     * @returns {Observable<R>|Promise<ErrorObservable>|Promise<R>|Promise<T>|any}\n     */\n    editAsset(asset:Asset):Observable<> {\n        let headers = new Headers({\n            'Content-Type': 'application/json'\n        });\n\n\n        return this.http\n            .post(this.editAssetUrl, JSON.stringify(asset), {headers: headers})\n            .map(this.extractData)\n            .catch(this.handleError);\n    }\n\n    /**\n     * Makes a get request to get all Assets\n     * @returns {Observable<R>|Promise<ErrorObservable>|Promise<R>|Promise<T>|any}\n     */\n    listAllAsset():Observable<> {\n        return this.http\n            .get(this.listAllAssetUrl)\n            .map(this.extractData)\n            .catch(this.handleError);\n    }\n\n    listNewAssets():Observable<> {\n        return this.http\n            .get(this.listNewAssetsUrl)\n            .map(this.extractData)\n            .catch(this.handleError);\n    }\n\n    listEmpEmail():Observable<> {\n        return this.http\n            .get(this.listEmail)\n            .map(this.extractData)\n            .catch(this.handleError);\n    }\n\n    /**\n     * Makes a post request to update 'isAvailable' to true by the object ID\n     * @param objId\n     * @returns {Observable<R>|Promise<ErrorObservable>|Promise<R>|Promise<T>|any}\n     */\n    returnAsset(objId:string) {\n        let headers = new Headers({\n            'Content-Type': 'application/json'\n        });\n        return this.http\n            .post(this.returnAssetUrl, JSON.stringify({'_id': objId}), {headers: headers})\n            .map(this.extractData)\n            .catch(this.handleError);\n    }\n\n    /**\n     * Makes a get request to get all Assets whose 'isAvailable' is true\n     * @param assetName\n     * @returns {Observable<R>|Promise<ErrorObservable>|Promise<R>|Promise<T>|any}\n     */\n    getAvailableAssetList(assetName:string) {\n        return this.http\n            .get(this.fetchAvailableAssetUrl + assetName)\n            .map(this.extractData)\n            .catch(this.handleError);\n    }\n\n    /**\n     * Makes a post request to assign empId to newly signedUp employees\n     * @param employee object\n     * @returns {Observable<R>|Promise<ErrorObservable>|Promise<R>|Promise<T>|any}\n     */\n\n    assignEmpId(employee:{}) {\n        let headers = new Headers({\n            'Content-Type': 'application/json'\n        });\n        return this.http\n            .post(this.assignEmpIdUrl, employee, {headers: headers})\n            .map(this.extractData)\n            .catch(this.handleError);\n    }\n\n    /**\n     * Makes a post request to assign an available asset to an Employee\n     * @param objectId\n     * @param asset\n     * @returns {Observable<R>|Promise<ErrorObservable>|Promise<R>|Promise<T>|any}\n     */\n    assignAsset(objectId:string, asset:Asset) {\n        let headers = new Headers({\n            'Content-Type': 'application/json'\n        });\n        return this.http\n            .post(this.assignAssetUrl, {'_id': objectId, 'assetData': asset}, {headers: headers})\n            .map(this.extractData)\n            .catch(this.handleError);\n    }\n\n    /**\n     * Returns the data received in JSON format\n     * @param res\n     * @returns {*|{}}\n     */\n    private extractData(res:Response) {\n        let body = res.json();\n        return body || {};\n    }\n\n    private extractCompleteData(res:Response) {\n        let body = {result: res.json(), status: res.status, statusText: res.statusText};\n        return body || {};\n    }\n\n    /**\n     * Handles error if there is an error in http request\n     * @param error\n     * @returns {ErrorObservable}\n     */\n    private handleError(error:any) {\n        let errMsg = (error._body) ? error._body : error.status ? `${error.status} - ${error.statusText}` : 'Server error';\n        return Observable.throw(errMsg);\n    }\n\n\n}\n"]}