{"version":3,"sources":["assets/search-asset.component.ts"],"names":[],"mappings":"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","file":"search-asset.component.js","sourcesContent":["import { Component, Input, OnInit, OnDestroy } from '@angular/core';\nimport {AssetService} from './asset.service';\nimport {Asset} from '../shared/model/asset';\nimport {Specs} from '../shared/model/specs';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/catch';\nimport 'rxjs/add/operator/debounceTime';\nimport 'rxjs/add/operator/distinctUntilChanged';\nimport 'rxjs/add/operator/switchMap';\nimport 'rxjs/add/operator/toPromise';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport {error} from \"util\";\nimport {GridOptions} from \"ag-grid/main\";\nimport {DatePipe} from \"@angular/common\";\n\n\n@Component({\n  moduleId:module.id,\n  selector: 'ym-admin',\n  templateUrl: 'search-asset.component.html',\n  styleUrls:['search-asset.component.css'],\n})\n\nexport class SearchAssetComponent implements OnInit {\n  @Input() public allocatedAssetsList: Asset[] = [];\n  isResult = false;\n  noResultIcon ='';\n  noResultFound='';\n  mode = 'Observable';\n  public errorMessage = '';\n  public selectedId: string;\n  private gridOptions:GridOptions = <GridOptions>{};\n  columnDefs = [];\n  rowData = [];\n  headers = [];\n\n\n  constructor(private assetService: AssetService,\n              private router: Router,\n              private route: ActivatedRoute,\n              private datePipe: DatePipe) {}\n\n  ngOnInit() {\n    this.route.data.forEach((data: { assets: Asset[]}) => {\n      if(data.assets.length > 0){\n        this.isResult = true;\n        this.columnDefs = this.createColumnDefs(data.assets[0]);\n        this.rowData = this.createDataRows(data.assets);\n      } else {\n        this.noResultIcon = \"../../assets/images/warning.png\";\n        this.noResultFound = \"../../assets/images/no-result.png\";\n        this.isResult = false;\n      }\n    });\n\n  }\n\n  /**\n   * This method returns column headers for ag-Grid\n   * @param asset\n   * @returns {Array}\n   */\n  private createColumnDefs(asset) {\n    let keyNames = Object.keys(asset);\n    let headers = [];\n    keyNames.filter(key => key != '__v' && key != '_id').map(key => {\n\n      if(key == 'specs') {\n        headers.push({\n          headerName: 'SPECIFICATIONS',\n          children: [\n            {headerName : 'HD', field : 'specs.HD', width : 100},\n            {headerName : 'RAM', field : 'specs.RAM', width : 100},\n            {headerName : 'PROCESSOR', field : 'specs.Processor', width : 100}\n          ]\n        });\n      } else {\n        headers.push({\n          headerName: this.getHeaderName(key).toLocaleUpperCase(),\n          field: key,\n          width: 140\n        })\n      }\n    });\n\n    headers.push({\n      headerName: 'update',\n      field: 'update',\n      cellRendererFramework: {\n        component: ClickableComponent\n      },\n      pinned: 'right',\n      width: 120\n    });\n    return headers;\n  }\n\n  getHeaderName(key: string) {\n    let newKey = key;\n    let capsLetterArray  = key.match(/[A-Z]/);\n    if(capsLetterArray != null){\n      capsLetterArray.map(capitalLetter => key = key.replace(capitalLetter, ' '+capitalLetter.toLowerCase()));\n      newKey = this.getHeaderName(key)\n    }\n    return newKey;\n  }\n\n  /**\n   * This method returns rows for the ag-Grid\n   * @param assets\n   * @returns {Array}\n   */\n  private createDataRows(assets) {\n    let updatedAssets = [];\n    for(let i in assets){\n      updatedAssets.push({\n        _id:assets[i]._id,\n        empId:assets[i].empId,\n        empName: assets[i].empName,\n        assetType: assets[i].assetType,\n        model: assets[i].model,\n        assetCode: assets[i].assetCode,\n        serialNumber: assets[i].serialNumber,\n        shippingDate: this.datePipe.transform(assets[i].shippingDate, 'yyyy-MM-dd'),\n        dateOfIssue: this.datePipe.transform(assets[i].dateOfIssue, 'yyyy-MM-dd'),\n        dateOfReturn: this.datePipe.transform(assets[i].dateOfReturn, 'yyyy-MM-dd'),\n        warrantyEndDate: this.datePipe.transform(assets[i].warrantyEndDate, 'yyyy-MM-dd'),\n        lastMaintenanceDate: this.datePipe.transform(assets[i].lastMaintenanceDate, 'yyyy-MM-dd'),\n        specs: assets[i].specs,\n        isAvailable:assets[i].isAvailable,\n        update:assets[i].update\n      })\n    }\n    return updatedAssets;\n  }\n}\n"]}